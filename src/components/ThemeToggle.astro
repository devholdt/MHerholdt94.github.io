---
import Icon from "src/components/Icon.astro";

const iconStyles =
  "flex z-10 relative p-2 w-8 h-8 text-base text-gray-300 transition-transform-color";
---

<theme-toggle>
  <button
    id="themeToggle"
    class="relative flex rounded-full bg-gray-400 shadow-inner dark:bg-gray-200"
  >
    <span
      class="absolute m-[-1px] h-px w-px overflow-hidden whitespace-nowrap border-0 p-0 clip-rect"
      >Toggle theme</span
    >
    <span
      class={`light ${iconStyles} before-light before:bg-primary-dark dark:before:bg-primary-dark`}
    >
      <Icon icon="sun" />
    </span>
    <span class={`dark ${iconStyles}`}>
      <Icon icon="moon" />
    </span>
  </button>
</theme-toggle>

<script>
  class ThemeToggle extends HTMLElement {
    constructor() {
      super();

      const button = this.querySelector("#themeToggle");

      const applyTheme = (isDark: boolean) => {
        if (button) {
          document.documentElement.classList[isDark ? "add" : "remove"]("dark");
          button.setAttribute("aria-pressed", String(isDark));
        }
      };

      const getThemePreference = () => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme") === "dark";
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches;
      };

      if (button) {
        button.addEventListener("click", () => {
          const isDark = !getThemePreference();
          localStorage.setItem("theme", isDark ? "dark" : "light");
          applyTheme(isDark);
        });
      }

      applyTheme(getThemePreference());
    }

    isDark() {
      return document.documentElement.classList.contains("dark");
    }
  }

  customElements.define("theme-toggle", ThemeToggle);
</script>
