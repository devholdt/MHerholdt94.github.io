---
import { ViewTransitions } from "astro:transitions";
import { AstroFont } from "astro-font";

import "@styles/global.css";

interface Props {
  title?: string | undefined;
  description?: string | undefined;
}

const {
  title = "Mathias B. Herholdt | Portfolio",
  description = "Mathias B. Herholdt's portfolio",
} = Astro.props;
---

<head>
  <meta charset="UTF-8" />
  <meta name="description" property="og:description" content={description} />
  <meta name="viewport" content="width=device-width" />
  <meta name="generator" content={Astro.generator} />
  <title>{title}</title>

  <link rel="icon" type="image/svg" href="/favicon.svg" />
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

  <AstroFont
    config={[
      {
        src: [],
        name: "Public Sans",
        googleFontsURL:
          "https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,100..900;1,100..900&display=swap",
        preload: true,
        display: "swap",
        selector: "body",
        fallback: "sans-serif",
      },
      {
        src: [],
        name: "Rubik",
        googleFontsURL:
          "https://fonts.googleapis.com/css2?family=Rubik:wght@300..900&display=swap",
        preload: true,
        display: "swap",
        selector: "body",
        fallback: "sans-serif",
      },
    ]}
  />

  <ViewTransitions />
</head>

<script is:inline>
  const applyTheme = (isDark) => {
    if (document.documentElement) {
      document.documentElement.classList[isDark ? "add" : "remove"]("dark");
    }
  };

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme") === "dark";
    }
    if (window.matchMedia) {
      return window.matchMedia("(prefers-color-scheme: dark)").matches;
    }
    return false;
  };

  const setThemePreference = () => {
    const isDark = getThemePreference();
    if (isDark !== undefined) {
      applyTheme(isDark);
    }
  };

  setThemePreference();

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement
        ? document.documentElement.classList.contains("dark")
        : false;
      if (isDark !== undefined) {
        localStorage.setItem("theme", isDark ? "dark" : "light");
      }
    });
    if (document.documentElement) {
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  }
</script>
